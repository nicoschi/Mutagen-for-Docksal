#!/usr/bin/env bash

## Manage a Docksal project with Mutagen (use: fin mutagen)

VERSION=0.2.2

# ANSI color codes
if [[ "$TERM" != "dumb" ]]; then
  red='\033[0;91m'
  green='\033[0;32m'
  yellow='\033[0;33m'
  NC='\033[0m'
fi

# Ensure required dependencies are available
command -v mutagen > /dev/null || { echo -e "${red}Error${NC}: Mutagen not installed"; exit 1; }
fin docker ps > /dev/null || { echo -e "${red}Error${NC}: Docker not running"; exit 1; }

# Helper functions
get_fin_variable() {
  fin config get --env=local "$1" 2> /dev/null || fin config get "$1" 2> /dev/null
}

set_fin_variable() {
  fin config set --env=local "$1=$2"
}

create_mutagen_config() {
  local project_root=$(get_fin_variable "PROJECT_ROOT" | tr -d '"')
  local project_name=$(get_fin_variable "PROJECT_NAME" | tr -d '"')

  [[ -f "$project_root/mutagen.yml" ]] && return

  cat > "$project_root/mutagen.yml" <<EOF
sync:
  defaults:
    flushOnCreate: true
    ignore:
      vcs: true
    permissions:
      defaultFileMode: 644
      defaultDirectoryMode: 755
  ${project_name}-cli:
    alpha: './'
    beta: 'docker://docker@$project_name""_cli_1/var/www'
    mode: 'two-way-resolved'
EOF
  echo "mutagen.yml created in $project_root"
}

init_project() {
  local new_project=$1

  [[ "$new_project" == true ]] && fin config generate

  set_fin_variable "MUTAGEN" 1
  set_fin_variable "PROJECT_ROOT" "$(get_fin_variable "PROJECT_ROOT")"
  set_fin_variable "PROJECT_NAME" "$(get_fin_variable "PROJECT_NAME")"
  set_fin_variable "DOCKSAL_VOLUMES" "none"

  create_mutagen_config

  [[ "$new_project" == false ]] && { fin rm; fin up; }
}

start_project() {
  if ! fin config env > /dev/null 2>&1; then
    init_project true
    mutagen project start
    return
  fi

  if [[ -z $(get_fin_variable "MUTAGEN") ]]; then
    echo -e "${red}WARNING${NC}: A Docksal project already exists."
    read -rp "Reset project containers (may cause data loss)? [y/N] " confirm
    [[ "$confirm" =~ ^[yY]$ ]] || { echo "Aborting"; return; }
    init_project false
  fi

  mutagen project start
}

stop_project() {
  local remove_cli=$1
  local project_root=$(get_fin_variable "PROJECT_ROOT" | tr -d '"')

  cd "$project_root" || { echo "Cannot stop"; exit 1; }

  mutagen project terminate
  [[ "$remove_cli" != "-nr" ]] && fin rm cli
  fin stop
}

restart_project() {
  stop_project "$1"
  start_project
}

update_script() {
  local latest_release=$(curl -s https://api.github.com/repos/nicoschi/mutagen-for-docksal/releases/latest | grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/')
  
  if [[ "$latest_release" == "$VERSION" ]]; then
    echo -e "${green}You already have the latest version ($VERSION).${NC}"
    return
  fi

  echo -e "${yellow}New release found ($latest_release). Update? [y/N] ${NC}"
  read -rp "" confirm
  [[ "$confirm" =~ ^[yY]$ ]] || { echo "Update aborted."; return; }

  curl -s "https://raw.githubusercontent.com/nicoschi/mutagen-for-docksal/$latest_release/mutagen" -o ~/.docksal/commands/mutagen
  echo -e "${green}Updated to version $latest_release.${NC}"
}

usage() {
  cat <<EOF
Usage: fin mutagen [command]

Commands:
  start | up         Start or initialize a project with Mutagen
  stop [-nr]         Stop project; use -nr to keep cli container
  restart [-nr]      Restart project; use -nr to keep cli container
  update             Check for updates and update if available
  version            Show version information
EOF
}

# Main script logic
case $1 in
  start|up) start_project ;;
  stop) stop_project "$2" ;;
  restart) restart_project "$2" ;;
  update) update_script ;;
  version) echo "$VERSION" ;;
  *) usage ;;
esac
